generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  pages                Page[]
  posts                Post[]
  sessions             Session[]
  createdWorkspaces    Workspace[]
  workspaceInvites     WorkspaceInvite[]     @relation("invitedUser")
  sentWorkspaceInvites WorkspaceInvite[]     @relation("inviter")
  memberships          WorkspaceMembership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          Int                   @id @default(autoincrement())
  name        String
  createdAt   DateTime              @default(now())
  createdById String
  pages       Page[]
  createdBy   User                  @relation(fields: [createdById], references: [id])
  invites     WorkspaceInvite[]
  memberships WorkspaceMembership[]
}

model WorkspaceMembership {
  workspaceId Int
  userId      String
  joinedAt    DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([workspaceId, userId])
}

model WorkspaceInvite {
  id            Int       @id @default(autoincrement())
  workspaceId   Int
  invitedUserId String
  inviterId     String
  status        String    @default("pending")
  createdAt     DateTime  @default(now())
  invitedUser   User      @relation("invitedUser", fields: [invitedUserId], references: [id])
  inviter       User      @relation("inviter", fields: [inviterId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
}

model Page {
  id          String    @id @default(uuid())
  title       String
  content     String?
  emoji       String?
  coverImage  String?
  isArchived  Boolean   @default(false)
  parentId    String?
  workspaceId Int
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  crdtState   Bytes?
  author      User      @relation(fields: [authorId], references: [id])
  parent      Page?     @relation("PageToPage", fields: [parentId], references: [id], onDelete: Cascade)
  children    Page[]    @relation("PageToPage")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([parentId])
  @@index([authorId])
}
