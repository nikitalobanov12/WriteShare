// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    createdWorkspaces Workspace[]
    memberships   WorkspaceMembership[]
    workspaceInvites WorkspaceInvite[] @relation("invitedUser")
    sentWorkspaceInvites WorkspaceInvite[] @relation("inviter")
    pages         Page[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Multi-tenancy: Workspaces and membership/invite support
model Workspace {
    id           Int      @id @default(autoincrement())
    name         String
    createdAt    DateTime @default(now())
    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    memberships  WorkspaceMembership[]
    invites      WorkspaceInvite[]
    pages        Page[]
}

model WorkspaceMembership {
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId Int
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    joinedAt    DateTime  @default(now())

    @@id([workspaceId, userId])
}

model WorkspaceInvite {
    id            Int       @id @default(autoincrement())
    workspace     Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId   Int
    invitedUser   User      @relation("invitedUser", fields: [invitedUserId], references: [id])
    invitedUserId String
    inviter       User      @relation("inviter", fields: [inviterId], references: [id])
    inviterId     String
    status        String    @default("pending")
    createdAt     DateTime  @default(now())
}

model Page {
    id          String    @id @default(cuid())
    title       String
    content     String?   @db.Text
    emoji       String?
    coverImage  String?
    isArchived  Boolean   @default(false)
    parentId    String?
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId Int
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Self-referential relation for nested pages
    parent      Page?     @relation("PageToPage", fields: [parentId], references: [id], onDelete: Cascade)
    children    Page[]    @relation("PageToPage")

    @@index([workspaceId])
    @@index([parentId])
    @@index([authorId])
}
